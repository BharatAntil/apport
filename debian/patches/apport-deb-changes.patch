Index: apport/apport/ui.py
===================================================================
--- apport.orig/apport/ui.py	2012-07-19 01:11:23.563989586 +0530
+++ apport/apport/ui.py	2012-07-19 01:11:50.040120886 +0530
@@ -19,6 +19,9 @@
 import errno, zlib
 import subprocess, threading, webbrowser
 
+import smtplib, platform, tempfile
+from email.mime.text import MIMEText
+
 import apport, apport.fileutils, apport.REThread
 
 from apport.crashdb import get_crashdb, NeedsCredentials
@@ -988,7 +991,98 @@
             os.write(w, str(e))
             sys.exit(1)
 
+    def check_maintainer_pref(self, package_name):
+	'''Checks for the tag Apport: No in the control fields'''
+
+	control_fields = tempfile.NamedTemporaryFile()
+
+	try:
+	    x =  subprocess.Popen(["/usr/bin/apt-cache", "show", package_name],stdout=control_fields)
+	except:
+	    # Something's screwed. Just bail for now
+	    return False
+	
+	control_fields.file.flush()
+	control_fields.file.seek(0)
+	for each_record in control_fields.file.readlines():
+	    if each_record.startswith("Apport: No"):
+		return False
+	return True
+
+    def email_report(self,sender=None, smtphost=None):
+	'''In Debian, we use BTS, which is heavily email oriented
+	   This is an adaption of file_report() into the very basic email interface'''
+
+	bts_recipient = 'submit@bugs.debian.org'
+
+	# At this time, we are not ready to take CrashDumps
+        try:
+            del self.report['CoreDump']
+        except KeyError:
+            pass
+
+	# Frame the report in the format the BTS understands
+	(buggyPackage, buggyVersion) = self.report['Package'].split(' ')
+
+	# First we check for the Maintainer's preference
+	if not self.check_maintainer_pref(buggyPackage):
+	    self.ui_error_message("Error", "The developer of package %s has chosen not to receive apport reports. If you think this bug is valid, please send an email directly to the developer" % (buggyPackage) )
+	    sys.exit(0)
+
+	temp = tempfile.NamedTemporaryFile()
+
+	temp.file.write("Package: " + buggyPackage + "\n")
+	temp.file.write("Version: " + buggyVersion + "\n\n\n")
+	temp.file.write("=============================\n\n")
+	temp.file.flush()
+
+	# Now write the apport bug report
+	self.report.write(temp)
+	temp.file.flush()
+
+	temp.file.seek(0)
+
+	msg = MIMEText(temp.file.read())
+	msg['Subject'] = self.report['Title']
+	msg['From'] = sender
+	msg['To'] = bts_recipient
+
+	sys.stdout.write(smtphost)
+	s = smtplib.SMTP(smtphost)
+	s.sendmail(sender, bts_recipient, msg.as_string() )
+	s.quit()
+
+
     def file_report(self):
+	'''changed file_report() to ubuntu_file_report()'''
+
+	if platform.dist()[0] in 'Debian' or platform.dist()[0] in 'debian':
+	    try:
+		deb_file = open("/etc/default/apport", 'r')
+	    except:
+		self.ui_error_message("Error", "Please configure apport settings in /etc/default/apport")
+		sys.exit(1)
+		
+	    sender = None
+	    smtphost = None
+	    for line in deb_file.readlines():
+		if line.startswith("sender="):
+		    sender = line.split("=")[1]
+		    sender = sender.rstrip("\n")
+		elif line.startswith("smtphost="):
+		    smtphost = line.split("=")[1]
+		    smtphost = smtphost.rstrip("\n")
+		else:
+		    pass
+
+	    if sender is None or smtphost is None:
+		self.ui_error_message("Error", "Please configure apport settings in /etc/default/apport")
+		sys.exit(1)
+	    self.email_report(sender, smtphost)
+	else:
+	    self.ubuntu_file_report()
+
+    def ubuntu_file_report(self):
         '''Upload the current report and guide the user to the reporting web page.'''
         # FIXME: This behaviour is not really correct, but necessary as
         # long as we only support a single crashdb and have whoopsie
